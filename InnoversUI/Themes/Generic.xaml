<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:InnoversUI.Controls" 
    xmlns:converters="clr-namespace:InnoversUI.Converters" xmlns:converters1="http://schemas.microsoft.com/netfx/2009/xaml/presentation" xmlns:system="clr-namespace:System;assembly=mscorlib">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/InnoversUI;component/Themes/Colors.xaml"/>
        <ResourceDictionary Source="/InnoversUI;component/Themes/ScrollbarStyles.xaml"/>
        <ResourceDictionary Source="/InnoversUI;component/Themes/DataGridStyles.xaml"/>
        <ResourceDictionary Source="/InnoversUI;component/Themes/DatePickerStyles.xaml"/>
        <ResourceDictionary Source="/InnoversUI;component/Themes/ComboBoxStyles.xaml"/>
        <ResourceDictionary Source="/InnoversUI;component/Themes/Dimensions.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--<Style TargetType="{x:Type local:CustomControl1}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomControl1}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <Color x:Key="SemiTransaprentColor" >#02985555</Color>

    <!--#region CIRCLEPROGRESSBAR -->
    <Style TargetType="{x:Type local:CircleProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CircleProgressBar}">
                    <!--TEMPLATE RESOURCE-->
                    <ControlTemplate.Resources>
                        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                        <converters:StrokeDashArrayConverter x:Key="StrokeDashArrayConverter" />
                    </ControlTemplate.Resources>

                    <!--TEMPLATE CONTAINER-->
                    <Ellipse
                        Width="{TemplateBinding Size}"
                        Height="{TemplateBinding Size}"
                        Stroke="{TemplateBinding ProgressColor}"
                        StrokeThickness="{TemplateBinding Thickness}"
                        StrokeDashCap="{TemplateBinding LineCape}"
                        Visibility="{TemplateBinding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"
                        RenderTransformOrigin="0.5 0.5"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center">

                        <Ellipse.StrokeDashArray>
                            <MultiBinding Converter="{StaticResource StrokeDashArrayConverter}">
                                <Binding Path="Size" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Thickness" RelativeSource="{RelativeSource TemplatedParent}"/>
                            </MultiBinding>
                        </Ellipse.StrokeDashArray>

                        <Ellipse.RenderTransform >
                            <RotateTransform x:Name="Rotation" Angle="0"/>
                        </Ellipse.RenderTransform>

                        <Ellipse.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation From="0" To="360" Storyboard.TargetName="Rotation" Storyboard.TargetProperty="Angle"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Ellipse.Triggers>
                    </Ellipse>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion CIRCLEPROGRESSBAR-->
    
    <!--#region TEXTFIELD -->
    <Style TargetType="{x:Type local:TextField}" >
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="FontFamily" Value="Outfit Medium"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TextField}">

                    <ControlTemplate.Resources>
                        <SolidColorBrush x:Key="MouseOverColor">Cyan</SolidColorBrush>
                        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                        <converters:NullToVisibility x:Key="NullToVisibility" />
                        <converters:CornerRadiusToLeftIconRadius x:Key="CornerRadiusToLeftIconRadius" />
                        <converters:CornerRadiusToRightIconRadius x:Key="CornerRadiusToRightIconRadius" />
                        <converters:PassBoxVisibilityToBoolean x:Key="PassBoxVisibilityToBoolean" />
                        <converters1:TemplateBindingExpressionConverter  x:Key="TemplateBindingExpressionConverter " />
                    </ControlTemplate.Resources>

                    <Border x:Name="Border" UseLayoutRounding="True" FocusVisualStyle="{TemplateBinding FocusVisualStyle}" Focusable="False" IsEnabled="{TemplateBinding IsEnabled}" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MinWidth="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MinHeight="{TemplateBinding MinHeight}" MaxHeight="{TemplateBinding MaxHeight}">

                        <Grid Focusable="False" UseLayoutRounding="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" MinWidth="0"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto" MinWidth="0"/>
                            </Grid.ColumnDefinitions>
                            <!--LEFT ICON-->
                            <Border x:Name="LeftIconBorder" Grid.Column="0" MinWidth="0" UseLayoutRounding="True" Visibility="{TemplateBinding LeftIcon, Converter={StaticResource NullToVisibility}}" Cursor="Arrow" CornerRadius="{TemplateBinding CornerRadius, Converter= {StaticResource CornerRadiusToLeftIconRadius}}" IsEnabled="{TemplateBinding IsEnabled}" Background="{TemplateBinding LeftIconBackColor}" Padding="3" Focusable="False">
                                <ContentControl Content="{TemplateBinding LeftIcon}" Focusable="False"/>
                            </Border>
                            
                            <!--TEXTBOX-->
                            <Border x:Name="TexBoxBorder" Grid.Column="1" UseLayoutRounding="True" IsEnabled="{TemplateBinding IsEnabled}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Padding="{TemplateBinding Padding}" Focusable="False" VerticalAlignment="Center">
                                <Grid Focusable="False">
                                    <TextBlock x:Name="HintText" Focusable="False" IsEnabled="{TemplateBinding IsEnabled}" HorizontalAlignment="{TemplateBinding HintTextHorizontalAlignment}" VerticalAlignment="{TemplateBinding HintTextVerticalAlignment}" Foreground="{TemplateBinding HintTextColor}" FontFamily="{TemplateBinding FontFamily}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" Margin="3 0" Padding="{TemplateBinding HintTextPadding}" Text="{TemplateBinding HintText}" Visibility="{TemplateBinding IsEmpty,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <PasswordBox x:Name="PassTextBox" PasswordChar="{TemplateBinding PasswordChar}"  Focusable="{TemplateBinding Focusable}" Visibility="{TemplateBinding IsPassTextField, Converter={StaticResource BooleanToVisibilityConverter}}" Background="Transparent" BorderThickness="0" VerticalContentAlignment="Center" Foreground="{TemplateBinding Foreground}" FontFamily="{TemplateBinding FontFamily}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" Margin="3 0" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" Cursor="IBeam" IsEnabled="{TemplateBinding IsEnabled}"/>
                                    <ScrollViewer  x:Name="PART_ContentHost" Focusable="{TemplateBinding Focusable}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Foreground="{TemplateBinding Foreground}" Visibility="{TemplateBinding IsPassTextField, Converter={StaticResource PassBoxVisibilityToBoolean}}" FontFamily="{TemplateBinding FontFamily}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" Cursor="IBeam" IsEnabled="{TemplateBinding IsEnabled}"/>
                                </Grid>
                            </Border>

                            <!--RIGHT ICON-->
                            <Border x:Name="RightIconBorder" Grid.Column="2" MinWidth="0" UseLayoutRounding="True" Visibility="{TemplateBinding RightIcon, Converter={StaticResource NullToVisibility}}" Cursor="Arrow" CornerRadius="{TemplateBinding CornerRadius, Converter= {StaticResource CornerRadiusToRightIconRadius}}" IsEnabled="{TemplateBinding IsEnabled}" Background="{TemplateBinding RightIconBackColor}" Padding="3" Focusable="False">
                                
                                <Grid>
                                    <!--<ContentControl Content="{TemplateBinding RightIcon}" Focusable="False" Visibility="{TemplateBinding IsPassTextField, Converter={StaticResource PassBoxVisibilityToBoolean}}"/>-->
                                    <ContentControl Content="{TemplateBinding RightIcon}" Focusable="False" />
                                    
                                    <!--CHECKBOX HIDE SHOW PASSWORD-->
                                    <!--<CheckBox x:Name="HideShowPassCheckBox" Cursor="Hand">
                                        <CheckBox.Style>
                                            <Style TargetType="CheckBox">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="CheckBox">
                                                            <Border x:Name="Splash" CornerRadius="50" Background="Transparent" Height="25" Width="25">
                                                                <Viewbox>
                                                                    <Path x:Name="Icon" Data="M480-320q75 0 127.5-52.5T660-500q0-75-52.5-127.5T480-680q-75 0-127.5 52.5T300-500q0 75 52.5 127.5T480-320Zm0-72q-45 0-76.5-31.5T372-500q0-45 31.5-76.5T480-608q45 0 76.5 31.5T588-500q0 45-31.5 76.5T480-392Zm0 192q-146 0-266-81.5T40-500q54-137 174-218.5T480-800q146 0 266 81.5T920-500q-54 137-174 218.5T480-200Zm0-300Zm0 220q113 0 207.5-59.5T832-500q-50-101-144.5-160.5T480-720q-113 0-207.5 59.5T128-500q50 101 144.5 160.5T480-280Z"
                                                                          Height="50" Width="50" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                </Viewbox>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                    <Setter Property="Data" TargetName="Icon" Value="m644-428-58-58q9-47-27-88t-93-32l-58-58q17-8 34.5-12t37.5-4q75 0 127.5 52.5T660-500q0 20-4 37.5T644-428Zm128 126-58-56q38-29 67.5-63.5T832-500q-50-101-143.5-160.5T480-720q-29 0-57 4t-55 12l-62-62q41-17 84-25.5t90-8.5q151 0 269 83.5T920-500q-23 59-60.5 109.5T772-302Zm20 246L624-222q-35 11-70.5 16.5T480-200q-151 0-269-83.5T40-500q21-53 53-98.5t73-81.5L56-792l56-56 736 736-56 56ZM222-624q-29 26-53 57t-41 67q50 101 143.5 160.5T480-280q20 0 39-2.5t39-5.5l-36-38q-11 3-21 4.5t-21 1.5q-75 0-127.5-52.5T300-500q0-11 1.5-21t4.5-21l-84-82Zm319 93Zm-151 75Z"/>
                                                                </Trigger>
                                                                <Trigger Property="IsChecked" Value="False">
                                                                    <Setter Property="Data" TargetName="Icon" Value="M480-320q75 0 127.5-52.5T660-500q0-75-52.5-127.5T480-680q-75 0-127.5 52.5T300-500q0 75 52.5 127.5T480-320Zm0-72q-45 0-76.5-31.5T372-500q0-45 31.5-76.5T480-608q45 0 76.5 31.5T588-500q0 45-31.5 76.5T480-392Zm0 192q-146 0-266-81.5T40-500q54-137 174-218.5T480-800q146 0 266 81.5T920-500q-54 137-174 218.5T480-200Zm0-300Zm0 220q113 0 207.5-59.5T832-500q-50-101-144.5-160.5T480-720q-113 0-207.5 59.5T128-500q50 101 144.5 160.5T480-280Z"/>
                                                                </Trigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Background" Value="LightGray" TargetName="Splash"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </CheckBox.Style>
                                    </CheckBox>
                                    <ContentControl Content="{TemplateBinding RightIcon}" Focusable="False" />-->
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{StaticResource MouseOverColor}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{StaticResource MouseOverColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Silver"/>
                            <Setter TargetName="LeftIconBorder" Property="Background" Value="Silver"/>
                            <Setter TargetName="RightIconBorder" Property="Background" Value="Silver"/>
                            <Setter TargetName="HintText" Property="Foreground" Value="Silver"/>
                            <Setter Property="Foreground" Value="Silver"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion TEXTFIELD-->
    
    <!--#region INNOBUTTON -->
    
    <Style TargetType="{x:Type local:InnoButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="Blue"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Content" Value="Button"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:InnoButton}">

                    <ControlTemplate.Resources>
                        <DropShadowEffect x:Key="MouseOverBtnShadow" BlurRadius="1" ShadowDepth="1" Opacity="0.5"/>
                        <DropShadowEffect x:Key="PressBtnShadow" BlurRadius="2" ShadowDepth="2"/>
                        <converters:BackColorToSplashColor x:Key="BackColorToSplashColor"/>
                        <Duration x:Key="AnimationDuration">0:0:0.2</Duration>
                        <system:Double x:Key="MouseOverColorOpacity">0.75</system:Double>
                    </ControlTemplate.Resources>
                    <Border
                            x:Name="BtnContainer"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            MinHeight="{TemplateBinding MinHeight}"
                            MaxHeight="{TemplateBinding MaxHeight}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            MinWidth="{TemplateBinding MinWidth}"
                            MaxWidth="{TemplateBinding MaxWidth}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            UseLayoutRounding="True"
                            Padding="{TemplateBinding Padding}">

                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" TextOptions.TextFormattingMode="Display" TextBlock.FontStretch="Condensed"/>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Gray" TargetName="BtnContainer"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="UseLayoutRounding" Value="True" TargetName="BtnContainer"/>
                            <Setter Property="Effect" Value="{StaticResource MouseOverBtnShadow}" TargetName="BtnContainer" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="UseLayoutRounding" Value="True" TargetName="BtnContainer"/>
                            <Setter Property="Effect" Value="{StaticResource PressBtnShadow}" TargetName="BtnContainer" />
                        </Trigger>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard >
                                    <DoubleAnimation Storyboard.TargetName="BtnContainer" Storyboard.TargetProperty="(Background).(Brush.Opacity)" From="1" To="{StaticResource MouseOverColorOpacity}" Duration="{StaticResource AnimationDuration}" FillBehavior="HoldEnd"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="BtnContainer" Storyboard.TargetProperty="(Background).(Brush.Opacity)" From="{StaticResource MouseOverColorOpacity}" To="1" Duration="{StaticResource AnimationDuration}" FillBehavior="HoldEnd"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion INNOBUTTON-->
    
    <!--#region CIRCLEBUTTON -->
    <Style TargetType="{x:Type local:CircleButton}">

        <Setter Property="Cursor" Value="Hand"/>
        <!--<Setter Property="Background" Value="WhiteSmoke"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Content" Value="CircleButton" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CircleButton}">
                    <ControlTemplate.Resources>
                        <converters:DoubleToCornerRadius x:Key="DoubleToCornerRadius"/>
                    </ControlTemplate.Resources>

                    <Grid>
                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="3" Width="{TemplateBinding Size}" Height="{TemplateBinding Size}" CornerRadius="{TemplateBinding Size, Converter={StaticResource DoubleToCornerRadius}}" Background="{TemplateBinding Background}"/>
                        <ContentControl x:Name="Content"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" Content="{TemplateBinding Content}"/>
                        
                        <Border x:Name="Splash" Visibility="Collapsed" Background="LightGray" Opacity="0.4" Width="{TemplateBinding Size}" Height="{TemplateBinding Size}" CornerRadius="{TemplateBinding Size, Converter={StaticResource DoubleToCornerRadius}}"/>

                    </Grid>
                   
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="Splash"/>
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SplashColor}" TargetName="Splash"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="Splash"/>
                            <Setter Property="Opacity" Value="0.8" TargetName="Splash"/>
                        </Trigger>
                        <!--<EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="Background" To="Violet"  FillBehavior="HoldEnd" Duration="0:0:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion CIRCLEBUTTON-->
    
    <!--#region CIRCLEIMAGE -->
    <Style TargetType="{x:Type local:CircleImage}">
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CircleImage}">

                    <ControlTemplate.Resources>
                        <converters:DoubleToCornerRadius x:Key="DoubleToCornerRadius"/>
                        <ImageBrush ImageSource="{TemplateBinding ImageSource}" x:Key="IS"/>
                    </ControlTemplate.Resources>

                    <Grid>
                        <Border x:Name="Border" Padding="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Size}" Height="{TemplateBinding Size}" CornerRadius="{TemplateBinding Size, Converter={StaticResource DoubleToCornerRadius}}">
                            <Border.Background>
                                <ImageBrush Stretch="{TemplateBinding Stretch}" ImageSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSource}" RenderOptions.BitmapScalingMode="HighQuality" RenderOptions.EdgeMode="Aliased"/>
                            </Border.Background>
                        </Border>

                    </Grid>


                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion CIRCLEIMAGE-->

    <!--#region CIRCLEIMAGE -->
    <Style TargetType="{x:Type local:CircleImageButton}">
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Cursor" Value="Hand"/>
       
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CircleImageButton}">

                    <ControlTemplate.Resources>
                        <converters:DoubleToCornerRadius x:Key="DoubleToCornerRadius"/>
                        <converters:ControlSizeToSplashSize x:Key="ControlSizeToSplashSize"/>
                    </ControlTemplate.Resources>

                    <Grid>
                        <Border x:Name="Border" ToolTip="{TemplateBinding ToolTip}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Cursor="{TemplateBinding Cursor}" Width="{TemplateBinding Size}" Height="{TemplateBinding Size}" CornerRadius="{TemplateBinding Size, Converter={StaticResource DoubleToCornerRadius}}">
                            <Border.Background>
                                <ImageBrush Stretch="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Stretch}" ImageSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSource}" RenderOptions.BitmapScalingMode="HighQuality">
                                </ImageBrush>
                            </Border.Background>
                        </Border>

                        <Border x:Name="Splash" ToolTip="{TemplateBinding ToolTip}" Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SplashColor}" Opacity="0.4" Visibility="Hidden" Width="{TemplateBinding Size, Converter={StaticResource ControlSizeToSplashSize}}" Height="{TemplateBinding Size, Converter={StaticResource ControlSizeToSplashSize}}" CornerRadius="{TemplateBinding Size, Converter={StaticResource DoubleToCornerRadius}}">

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="Splash"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="Splash"/>
                            <Setter Property="Opacity" Value="0.7" TargetName="Splash"/>
                        </Trigger>
                    </ControlTemplate.Triggers>


                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion CIRCLEIMAGE-->

    <!--#region INNOCOMBOBOX -->
    <system:Double x:Key="ComboBoxFontSize">11</system:Double>
    <system:Double x:Key="ComboxHeight" >35</system:Double>
    <SolidColorBrush x:Key="ComboBoxDefaultBorderColor" Color="Teal"/>
    <SolidColorBrush x:Key="ComboBoxMouseOverBorderColor" Color="Teal"/>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Border
            x:Name="Border"
            Width="23"
            Grid.Column="0"
            CornerRadius="0 3 3 0"
            Background="Teal"
            BorderBrush="Teal" 
            SnapsToDevicePixels="False"/>

            <Path 
            x:Name="Arrow"
            Grid.Column="0"     
            Fill="White"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Cursor="IBeam"  Background="{TemplateBinding Background}" VerticalAlignment="Center"  BorderThickness="0" MaxWidth="{TemplateBinding MinWidth}" MinWidth="{TemplateBinding MaxWidth}"/>
    </ControlTemplate>
    
    <Style  TargetType="{x:Type local:InnoComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="FontSize" Value="{DynamicResource ComboBoxFontSize}"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="Background" Value="Azure" />
        <Setter Property="MinHeight" Value="{DynamicResource DefaultFieldHeight}"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:InnoComboBox}">
                    <ControlTemplate.Resources>
                        <converters:InnoComboBoxButtonRadius  x:Key="InnoComboBoxButtonRadius"/>
                    </ControlTemplate.Resources>
                    
                    <Border x:Name="Border" BorderThickness="2" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" MaxWidth="{TemplateBinding MaxWidth}" MinWidth="{TemplateBinding MinWidth}" Height="{TemplateBinding Height}" MinHeight="{TemplateBinding MinHeight}" MaxHeight="{TemplateBinding MaxHeight}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0">
                                <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}"
                                    ContentTemplate="{TemplateBinding ItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    Margin="11 0 25 0"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left"
                                    IsEnabled="True"/>
                                <Label 
                                    x:Name="HintText"
                                    Style="{x:Null}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left"
                                    Visibility="Hidden"
                                    Foreground="{TemplateBinding HintTextColor}"
                                    Background="Transparent"
                                    Padding="8 0 0 0"
                                    Content="{TemplateBinding HintText}"
                                    FontFamily="Outfit"
                                    FontSize="{TemplateBinding FontSize}"/>
                                <TextBox 
                                        x:Name="PART_EditableTextBox"
                                        Style="{x:Null}" 
                                        Template="{StaticResource ComboBoxTextBox}" 
                                        HorizontalAlignment="Left" 
                                        VerticalAlignment="Center" 
                                        Focusable="True"
                                        Background="Transparent"
                                        Margin="5 0"
                                        IsInactiveSelectionHighlightEnabled="False"
                                        FontFamily="{TemplateBinding FontFamily}"
                                        FontSize="{TemplateBinding FontSize}"
                                        FontWeight="{TemplateBinding FontWeight}"
                                        MaxWidth="{TemplateBinding Width}"
                                        Visibility="Hidden"
                                        IsReadOnly="{TemplateBinding IsReadOnly}" />
                                <!--SelectionBrush="Transparent"/>-->

                                <Popup 
                                    x:Name="Popup"
                                    Placement="Bottom"
                                    PlacementTarget="{Binding ElementName=Border}"
                                    IsOpen="{TemplateBinding IsDropDownOpen}"
                                    AllowsTransparency="True" 
                                    Focusable="False"
                                    PopupAnimation="Slide">

                                    <!--Background="#FFDED9E2"-->
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="#FFDED9E2"
                                        CornerRadius="8"
                                        BorderThickness="1"
                                        BorderBrush="RosyBrown"
                                        Padding="5"
                                        Margin="10"
                                        MinWidth="{TemplateBinding ActualWidth}"
                                        MaxWidth="{TemplateBinding ActualWidth}"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        UseLayoutRounding="True">
                                        <Grid Name="DropDown"
                                        SnapsToDevicePixels="True"                
                                        MinWidth="{TemplateBinding ActualWidth}"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}" >

                                            <ScrollViewer HorizontalAlignment="Center"  SnapsToDevicePixels="True" FontWeight="DemiBold" FontFamily="Outfit" FontSize="11" Cursor="Hand">

                                            </ScrollViewer>
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Margin="3"/>
                                        </Grid>
                                    </Border>


                                </Popup>
                            </Grid>

                            <ToggleButton 
                                x:Name="ToggleButton"
                                Grid.Column="1" 
                                Background="{TemplateBinding ButtonColor}"
                                Focusable="False"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="ToggleButton">
                                                    <Border
                                                            x:Name="Border"
                                                            Width="23"
                                                            Grid.Column="0"
                                                            CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:InnoComboBox}, Converter={StaticResource InnoComboBoxButtonRadius}}"
                                                            Background="{TemplateBinding Background}"
                                                            BorderBrush="{TemplateBinding Background}" 
                                                            SnapsToDevicePixels="False"
                                                            Cursor="Hand">
                                                        <Path x:Name="Arrow"  Grid.Column="0" Fill="White" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="HintText"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="Border" Value="DeepSkyBlue"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True" SourceName="PART_EditableTextBox">
                            <Setter Property="BorderBrush" TargetName="Border" Value="DeepSkyBlue"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="25"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Silver"/>
                            <Setter Property="Background" Value="Silver" TargetName="ToggleButton"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="5"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="MouseDown" SourceName="PART_EditableTextBox">
                            <BeginStoryboard>
                                <Storyboard>
                                    <BooleanAnimationUsingKeyFrames
                                        Storyboard.TargetName="Popup" 
                                        Storyboard.TargetProperty="IsOpen"
                                        Duration="0:0:1" FillBehavior="HoldEnd">
                                        <DiscreteBooleanKeyFrame Value="False" KeyTime="0:0:0" />
                                        <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:1" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <!--#endregion INNOCOMBOBOX-->

    <!--#region FAVORITECHECKBOX -->
    <Style TargetType="{x:Type local:FavoriteCheckBox}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FavoriteCheckBox}">
                    <ControlTemplate.Resources>
                        <Geometry x:Key="CheckedIconData">M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5C2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.03L12,21.35Z</Geometry>
                        <Geometry x:Key="UncheckedIconData">M12.1,18.55L12,18.65L11.89,18.55C7.14,14.24 4,11.39 4,8.5C4,6.5 5.5,5 7.5,5C9.04,5 10.54,6 11.07,7.36H12.93C13.46,6 14.96,5 16.5,5C18.5,5 20,6.5 20,8.5C20,11.39 16.86,14.24 12.1,18.55M16.5,3C14.76,3 13.09,3.81 12,5.08C10.91,3.81 9.24,3 7.5,3C4.42,3 2,5.41 2,8.5C2,12.27 5.4,15.36 10.55,20.03L12,21.35L13.45,20.03C18.6,15.36 22,12.27 22,8.5C22,5.41 19.58,3 16.5,3Z</Geometry>
                        <SolidColorBrush x:Key="DefaultBackColor" Color="{StaticResource SemiTransaprentColor}" />
                        <Color x:Key="ActiveColor">#FFC3006B</Color>
                        <Color x:Key="DesactiveColor">Gray</Color>
                        <SolidColorBrush x:Key="ActiveFillColor" Color="{StaticResource ActiveColor}"/>
                        <SolidColorBrush x:Key="DesactiveFillColor" Color="{StaticResource DesactiveColor}"/>
                        <Duration x:Key="ActiveDuration">0:0:0:0.3</Duration>
                        <Duration x:Key="DesactiveDuration">0:0:0:0.3</Duration>
                        <Storyboard x:Key="ActiveAnimation">
                            <DoubleAnimation Storyboard.TargetName="ActiveIcon" Storyboard.TargetProperty="Opacity" From="0" To="1" FillBehavior="HoldEnd" Duration="{StaticResource ActiveDuration}" />
                            <DoubleAnimation Storyboard.TargetName="DesactiveIcon" Storyboard.TargetProperty="Opacity" From="1" To="0" FillBehavior="HoldEnd" Duration="{StaticResource DesactiveDuration}" />
                        </Storyboard>

                        <Storyboard x:Key="DesactiveAnimation">
                            <DoubleAnimation Storyboard.TargetName="ActiveIcon" Storyboard.TargetProperty="Opacity" From="1" To="0" FillBehavior="HoldEnd" Duration="{StaticResource DesactiveDuration}" />
                            <DoubleAnimation Storyboard.TargetName="DesactiveIcon" Storyboard.TargetProperty="Opacity" From="0" To="1" FillBehavior="HoldEnd" Duration="{StaticResource ActiveDuration}" />
                        </Storyboard>

                    </ControlTemplate.Resources>
                    
                    <Grid x:Name="MainGrid" Cursor="{TemplateBinding Cursor}" Background="{StaticResource DefaultBackColor}">
                        <Viewbox x:Name="ActiveIcon" Height="{TemplateBinding Size}" Width="{TemplateBinding Size}" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Path Data="{StaticResource CheckedIconData}" Height="{TemplateBinding Size}" Width="{TemplateBinding Size}" Fill="{StaticResource ActiveFillColor}"/>
                        </Viewbox>
                        <Viewbox x:Name="DesactiveIcon" Height="{TemplateBinding Size}" Width="{TemplateBinding Size}" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Path Data="{StaticResource UncheckedIconData}" Height="{TemplateBinding Size}" Width="{TemplateBinding Size}" Fill="{StaticResource DesactiveFillColor}"/>
                        </Viewbox>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Checked">
                            <BeginStoryboard Storyboard="{StaticResource ActiveAnimation}">
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Unchecked">
                            <BeginStoryboard Storyboard="{StaticResource DesactiveAnimation}">
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion FAVORITECHECKBOX-->

    <!--#region INNOICON -->
    <Style TargetType="{x:Type local:InnoIcon}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:InnoIcon}">
                    <Viewbox MaxWidth="{TemplateBinding Size}" MaxHeight="{TemplateBinding Size}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Path Width="{TemplateBinding Size}" Height="{TemplateBinding Size}" Fill="{TemplateBinding Fill}" Data="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconData}" VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion INNOICON-->
    
    <!--#region EXPANDERTILE-->
    <Style TargetType="{x:Type local:ExpanderTile}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ExpanderTile}">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderWidth}" BorderBrush="{TemplateBinding BorderColor}" Background="{TemplateBinding BackColor}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <!--HEADER-->
                            <Border x:Name="HeaderContainer" Grid.Row="0" Height="{TemplateBinding HeaderHeight}" >
                                <ToggleButton x:Name="HeaderToggleButton" Cursor="Hand" Background="Teal" >
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <ControlTemplate.Resources>
                                                <converters:ExpanderTileHeaderCornerRadius x:Key="ExpanderTileHeaderCornerRadius"/>
                                                <Duration x:Key="AnimationDuration">0:0:0.4</Duration>
                                                <system:Double x:Key="RotationAngle">180</system:Double>
                                            </ControlTemplate.Resources>
                                           
                                            <Border x:Name="HeaderMainBorder" Background="{Binding Path=HeaderBackgroundColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}"          
                                                BorderBrush="{Binding HeaderBorderColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}" 
                                                BorderThickness="{Binding HeaderBorderThickness, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}">

                                                <Border.CornerRadius>
                                                    <MultiBinding Converter="{StaticResource ExpanderTileHeaderCornerRadius}">
                                                        <Binding Path="CornerRadius" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}"/>
                                                        <Binding Path="IsExpanded" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}"/>
                                                    </MultiBinding>
                                                </Border.CornerRadius>

                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>

                                                    <!--TITLE-->
                                                    <Border Grid.Column="0" Padding="5" VerticalAlignment="Center">
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="Auto" MinWidth="0"/>
                                                                <ColumnDefinition Width="*"/>
                                                            </Grid.ColumnDefinitions>

                                                            <Grid Grid.Column="0" >
                                                                <ContentPresenter Content="{Binding LeftIcon, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                                            </Grid>
                                                            <TextBlock x:Name="HeaderTitleTextBlock" Grid.Column="1" FontSize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}, Path=TitleFontSize}" Foreground="{Binding TitleColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}" Text="{Binding Title, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}" VerticalAlignment="Center" FontWeight="SemiBold"/>
                                                        </Grid>
                                                    </Border>

                                                    <!--ICON-->
                                                    <local:InnoIcon x:Name="Icon" Grid.Column="1" IconData="{Binding Icon, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}" Fill="{Binding IconColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}" RenderTransformOrigin="0.5,0.5">
                                                        <local:InnoIcon.RenderTransform>
                                                            <RotateTransform x:Name="RotateTransform" Angle="0"/>
                                                        </local:InnoIcon.RenderTransform>
                                                    </local:InnoIcon>
                                                </Grid>

                                            </Border>

                                            <ControlTemplate.Triggers >
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="{Binding HeaderMouseOverColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ExpanderTile}}" TargetName="HeaderMainBorder"/>
                                                </Trigger>

                                                <EventTrigger RoutedEvent="ToggleButton.Checked">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="RotateTransform" Storyboard.TargetProperty="Angle" From="0" To="{StaticResource RotationAngle}" Duration="{StaticResource AnimationDuration}" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>

                                                <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="RotateTransform" Storyboard.TargetProperty="Angle" From="{StaticResource RotationAngle}" To="0" Duration="{StaticResource AnimationDuration}" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>
                                            </ControlTemplate.Triggers>

                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>

                            </Border>

                            <!--CONTENT-->
                            <Border Grid.Row="1" Visibility="{TemplateBinding IsExpanded, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Border x:Name="Separator" Height="{TemplateBinding SeparatorHeight}" Background="{TemplateBinding SeparatorColor}" Margin="{TemplateBinding SeparatorMargin}"  Visibility="{TemplateBinding ShowSeparator, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <ContentPresenter x:Name="ContentContainer" Grid.Row="1" Content="{TemplateBinding Child}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion EXPANDERTILE-->

    <!--#region SWITCH-->

    <system:Double x:Key="SwitchWidth">35</system:Double>
    <system:Double x:Key="SwitchHeight">16</system:Double>
    <Color x:Key="ActiveBorderBackColor" >#FF00FBEA</Color>
    <SolidColorBrush x:Key="DefaultBackgroundColor" Color="{StaticResource SemiTransaprentColor}" />
    <Style TargetType="{x:Type local:Switch}">
        <Setter Property="Width" Value="{StaticResource SwitchWidth}"/>
        <Setter Property="MaxWidth" Value="{StaticResource SwitchWidth}"/>
        <Setter Property="Height" Value="{StaticResource SwitchHeight}"/>
        <Setter Property="MaxHeight" Value="{StaticResource SwitchHeight}"/>
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="1.3" />
        <Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Switch}">
                    <ControlTemplate.Resources>
                        <Color x:Key="ActivateColor">Blue</Color>
                        <Color x:Key="DesactivateColor">Gray</Color>
                        <SolidColorBrush x:Key="ActivateColorBrush" Color="{StaticResource ActivateColor}"/>
                        <SolidColorBrush x:Key="DesactivateColorBrush" Color="{StaticResource DesactivateColor}"/>
                        <Thickness x:Key="ActivateMargin">16 0 0 0</Thickness>
                        <Thickness x:Key="DesactivateMargin">0 0 0 0</Thickness>
                        <converters:SwitchWidthToCircleSize x:Key="SwitchWidthToCircleSize"/>
                        <converters:SwitchSizeToCircleMargin x:Key="SwitchSizeToCircleMargin"/>
                        <Duration x:Key="AnimationDuration">0:0:0.3</Duration>

                        <Geometry x:Key="LigthIconData">M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z</Geometry>

                        <Storyboard x:Key="ActiveAnimation">
                            <ColorAnimation Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource ActiveBorderBackColor}"  FillBehavior="HoldEnd" Duration="{StaticResource AnimationDuration}" />
                            <ColorAnimation Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource ActivateColor}"  FillBehavior="HoldEnd" Duration="{StaticResource AnimationDuration}" />
                            <ColorAnimation Storyboard.TargetName="Circle" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource ActivateColor}"  FillBehavior="HoldEnd" Duration="{StaticResource AnimationDuration}" />
                            <ThicknessAnimation Storyboard.TargetName="Circle" Storyboard.TargetProperty="Margin" From="{StaticResource DesactivateMargin}" To="{StaticResource ActivateMargin}"  Duration="{StaticResource AnimationDuration}"/>
                            <ThicknessAnimation Storyboard.TargetName="ThemeIcon" Storyboard.TargetProperty="Margin" From="{StaticResource ActivateMargin}" To="{StaticResource DesactivateMargin}"  Duration="{StaticResource AnimationDuration}"/>
                        </Storyboard>
                        <Storyboard x:Key="DesactiveAnimation">
                            <ColorAnimation Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource SemiTransaprentColor}"  FillBehavior="HoldEnd" Duration="{StaticResource AnimationDuration}" />
                            <ColorAnimation Storyboard.TargetName="MainBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{StaticResource DesactivateColor}"  FillBehavior="HoldEnd" Duration="{StaticResource AnimationDuration}" />
                            <ColorAnimation Storyboard.TargetName="Circle" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource DesactivateColor}"  FillBehavior="HoldEnd" Duration="{StaticResource AnimationDuration}" />
                            <ThicknessAnimation Storyboard.TargetName="Circle" Storyboard.TargetProperty="Margin" From="{StaticResource ActivateMargin}" To="{StaticResource DesactivateMargin}"  Duration="{StaticResource AnimationDuration}" />
                            <ThicknessAnimation Storyboard.TargetName="ThemeIcon" Storyboard.TargetProperty="Margin" From="{StaticResource DesactivateMargin}" To="{StaticResource ActivateMargin}"  Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="MainGrid" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}">
                        <Border x:Name="MainBorder"  Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Border x:Name="Circle" Background="Gray" Height="{TemplateBinding Height}" Width="{TemplateBinding Height}" BorderThickness="2.5" CornerRadius="50"  VerticalAlignment="Center" HorizontalAlignment="Left"/>
                                <Viewbox x:Name="ThemeIcon" Height="10" Width="10" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="{TemplateBinding ThemeIconVisibility}">
                                    <Path Data="{StaticResource CalendarIconData }" Fill="{StaticResource DesactivateColorBrush}" Margin="5 0"/>
                                </Viewbox>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" >
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        
                        <EventTrigger RoutedEvent="Checked">
                            <BeginStoryboard Storyboard="{StaticResource ActiveAnimation}"/>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="Unchecked">
                            <BeginStoryboard Storyboard="{StaticResource DesactiveAnimation}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion SWITCH-->
    
    
</ResourceDictionary>
